<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>包管理工具那么多，怎么选？npm、yarn 和 pnpm 三者比较及使用详解！</title>
    <link href="/2023/09/12/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E9%82%A3%E4%B9%88%E5%A4%9A%EF%BC%8C%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9Fnpm%E3%80%81yarn-%E5%92%8C-pnpm-%E4%B8%89%E8%80%85%E6%AF%94%E8%BE%83%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%81/"/>
    <url>/2023/09/12/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E9%82%A3%E4%B9%88%E5%A4%9A%EF%BC%8C%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9Fnpm%E3%80%81yarn-%E5%92%8C-pnpm-%E4%B8%89%E8%80%85%E6%AF%94%E8%BE%83%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="包管理工具那么多，怎么选？npm、yarn-和-pnpm-三者比较及使用详解！"><a href="#包管理工具那么多，怎么选？npm、yarn-和-pnpm-三者比较及使用详解！" class="headerlink" title="包管理工具那么多，怎么选？npm、yarn 和 pnpm 三者比较及使用详解！"></a>包管理工具那么多，怎么选？npm、yarn 和 pnpm 三者比较及使用详解！</h1><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>在 Vue 项目中，我们需要使用许多第三方依赖库，如 Vue Router、Vuex、Axios、Element UI 等等。这些依赖库通常以 NPM 包的形式提供，而且在使用时需要进行版本管理。因此，我们需要使用一个包管理工具来统一管理这些依赖库，避免版本冲突和管理繁琐。</p><p>常见的 Vue 项目包管理工具包括：</p><p>NPM：NPM（Node Package Manager）是 Node.js 自带的包管理工具，也是最常用的包管理工具之一。它可以方便地安装、升级、卸载依赖包，还可以发布自己的包到 NPM 仓库。</p><p>Yarn：Yarn 是 Facebook 推出的包管理工具，具有速度快、缓存机制好等优点。与 NPM 相比，Yarn 可以更快地下载依赖包，并且支持离线模式。</p><p>PNPM：PNPM（Permissive NPM）是一款新兴的包管理工具，与 NPM 不同的是，PNPM 采用了类似软链接的方式，将依赖包安装到每个项目的 node_modules 目录下，从而避免了大量的重复安装。</p><p>这些包管理工具都提供了一种方便的方式来管理项目中的依赖库，并且都能够很好地集成到 Vue 项目中。</p><h5 id="1-1、中文官网地址"><a href="#1-1、中文官网地址" class="headerlink" title="1.1、中文官网地址"></a>1.1、中文官网地址</h5><p>以下是这些工具的中文官网地址：</p><p><a href="https://nodejs.org/zh-cn">Node.js 中文官网地址</a><br><a href="https://v2.cn.vuejs.org/">Vue.js V2 中文官网地址</a><br><a href="https://cn.vuejs.org/https://cn.vuejs.org/">Vue.js V3 中文官网地址</a><br><a href="https://www.npmjs.cn/">npm 中文官网地址</a><br><a href="https://yarn.bootcss.com/">Yarn V1 中文官网地址</a><br><a href="https://www.yarnpkg.cn/">Yarn V2 中文官网地址</a><br><a href="https://pnpm.io/zh">PNPM 中文官网地址</a></p><h4 id="2、NPM"><a href="#2、NPM" class="headerlink" title="2、NPM"></a>2、NPM</h4><h5 id="2-1、NPM-简介"><a href="#2-1、NPM-简介" class="headerlink" title="2.1、NPM 简介"></a>2.1、NPM 简介</h5><p>NPM（Node Package Manager）是 Node.js 默认的包管理器，它是世界上最大的软件注册表之一，有超过 100 万个包（package）可供下载使用。NPM 可以让开发者轻松地分享、安装和管理 Node.js 中的代码包和依赖项，它是构建现代 JavaScript 应用程序的关键组件之一。</p><p>除了作为 Node.js 的包管理器之外，NPM 也可以用于前端开发。在前端开发中，NPM 主要用于安装、管理和更新前端项目的各种依赖包，例如 Vue、React、Angular 等常用框架。NPM 可以帮助开发者快速、方便地安装和管理这些依赖，以便在项目中使用它们。</p><p>总之，NPM 是一个非常重要的开发工具，它提供了丰富的功能和生态系统，帮助开发者更轻松、更高效地构建应用程序。</p><h6 id="2-2、NPM-安装"><a href="#2-2、NPM-安装" class="headerlink" title="2.2、NPM 安装"></a>2.2、NPM 安装</h6><p>Mac 系统你可以直接在 Node.js 官网下载地址 下载 pkg 安装包，然后直接点击安装即可完成 Node.js 安装。</p><p>Windows 系统可以参考我的另一篇文章《Windows 安装配置 Node.js》</p><p>如果需要更详细的安装说明，可以参考菜鸟教程中的 Node.js 安装配置 教程。</p><p>安装好 Node.js 之后，npm 会自动安装在电脑上，因此无需另行安装。你可以在命令行中输入 npm -v 命令，检查 npm 是否已经正确安装。如果输出了版本号，则说明 npm 安装成功。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 查看 Node.js 版本信息</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br><span class="hljs-comment"># 查看 npm 版本信息</span><br>npm -v<br><br></code></pre></td></tr></table></figure><h6 id="2-3、NPM-常用命令"><a href="#2-3、NPM-常用命令" class="headerlink" title="2.3、NPM 常用命令"></a>2.3、NPM 常用命令</h6><p>下面列举一些常用的 npm 命令及其详细介绍：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 1、创建一个新的 Node.js 应用程序或模块，并在 package.json 文件中定义依赖项。</span><br>npm init<br><br><span class="hljs-comment"># 2、安装依赖项。如果在安装时没有指定包的版本号，则将安装最新版本的包。</span><br>npm install<br><br><span class="hljs-comment"># 3、安装指定的依赖项，并将其添加到 package.json 文件中的 dependencies 中。</span><br>npm install <span class="hljs-variable">&lt;package name&gt;</span> --save<br><br><span class="hljs-comment"># 4、安装指定的开发依赖项，并将其添加到 package.json 文件中的 devDependencies 中。</span><br>npm install <span class="hljs-variable">&lt;package name&gt;</span> --save-dev<br><br><span class="hljs-comment"># 5、将包安装为全局包，以便在系统的任何位置使用它们。</span><br>npm install -g <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 6、更新 package.json 文件中指定的所有包的版本。</span><br>npm update<br><br><span class="hljs-comment"># 7、更新指定的包的版本。</span><br>npm update <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 8、卸载指定的依赖项，并将其从 package.json 文件中的 dependencies 或 devDependencies 中删除。</span><br>npm uninstall <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 9、查看指定的包的详细信息，包括其版本、描述、关键字、维护者等。</span><br>npm view <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 10、搜索与指定关键字匹配的包。</span><br>npm search <span class="hljs-variable">&lt;keywords&gt;</span><br><br><span class="hljs-comment"># 11、清除 npm 的缓存。</span><br>npm cache clean<br><br><span class="hljs-comment"># 12、启动 Node.js 应用程序。</span><br>npm start<br><br><span class="hljs-comment"># 13、运行测试套件。</span><br>npm test<br><br><span class="hljs-comment"># 14、运行 package.json 文件中指定的脚本。</span><br>npm run <span class="hljs-variable">&lt;script name&gt;</span><br><br><span class="hljs-comment"># 15、列出当前项目中已安装的所有包及其依赖关系。</span><br>npm ls<br><br><span class="hljs-comment"># 16、检查当前项目中已安装的包是否有过时的版本。</span><br>npm outdated：<br><br><span class="hljs-comment"># 17、查看指定包的详细信息。</span><br>npm view <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 18、查看指定包的摘要信息。</span><br>npm info <span class="hljs-variable">&lt;package name&gt;</span><br><br><span class="hljs-comment"># 19、将当前目录下的代码发布为一个 npm 包。</span><br>npm publish<br><br><span class="hljs-comment"># 20、查看当前登录的 npm 用户名。</span><br>npm whoami<br><br></code></pre></td></tr></table></figure><p>以上是一些常用的 npm 命令及其详细介绍，可以根据您的需要选择使用。</p><h5 id="2-4、NPM-创建项目"><a href="#2-4、NPM-创建项目" class="headerlink" title="2.4、NPM 创建项目"></a>2.4、NPM 创建项目</h5><p>要创建一个 Vue 项目，可以使用 Vue CLI（Command Line Interface）命令行工具来生成基本的项目结构和文件。</p><h6 id="2-4-1、vue-init"><a href="#2-4-1、vue-init" class="headerlink" title="2.4.1、vue init"></a>2.4.1、vue init</h6><p>vue init 是在 Vue CLI 2.x 版本中使用的创建项目的命令，可以快速创建一个模板项目，例如从一个 GitHub 模板中拉取 Vue 项目模板进行初始化。可以通过命令行交互式地选择需要的模板以及一些配置信息。vue init 指令已经被 Vue CLI 3.x 中的 vue create 替代，不再更新。</p><p>使用 vue init 创建 Vue 项目示例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 全局安装 Vue CLI 2.x</span><br>npm install -g vue-cli<br><br><span class="hljs-comment"># 查看 Vue 版本信息</span><br>vue <span class="hljs-comment">--version</span><br><br><span class="hljs-comment"># 从 GitHub 上拉取 webpack 模板</span><br>vue init webpack <span class="hljs-keyword">my</span>-project<br><br><span class="hljs-comment"># 安装依赖</span><br>cd <span class="hljs-keyword">my</span>-project<br>npm install<br><br><span class="hljs-comment"># 运行项目</span><br>npm <span class="hljs-built_in">run</span> dev<br><br></code></pre></td></tr></table></figure><h6 id="2-4-2、vue-create"><a href="#2-4-2、vue-create" class="headerlink" title="2.4.2、vue create"></a>2.4.2、vue create</h6><p>vue create 是在 Vue CLI 3.x 版本中使用的创建项目的命令，可以快速创建一个新的 Vue 项目，从而让开发者快速搭建起一个基本的 Vue 项目架构。</p><p>vue create 提供了默认的配置以及插件管理，开发者可以根据自己的需要进行配置和管理。</p><p>使用 vue create 创建 Vue 项目示例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 全局安装 Vue CLI 3.x</span><br>npm install -g @vue/cli<br><br><span class="hljs-comment"># 查看 Vue 版本信息</span><br>vue <span class="hljs-comment">--version</span><br><br><span class="hljs-comment"># 创建一个新项目</span><br>vue create <span class="hljs-keyword">my</span>-project<br><br><span class="hljs-comment"># 安装依赖</span><br>cd <span class="hljs-keyword">my</span>-project<br>npm install<br><br><span class="hljs-comment"># 运行项目</span><br>npm <span class="hljs-built_in">run</span> serve<br><br></code></pre></td></tr></table></figure><p>在创建项目时，vue create 提供了更多的配置选项和插件，比如使用 TypeScript、使用 Vue Router、使用 Vuex 等等。同时，使用 vue create 创建项目可以直接在项目中添加插件，而不需要像 vue init 一样手动添加。</p><h4 id="3-1、Yarn-简介"><a href="#3-1、Yarn-简介" class="headerlink" title="3.1、Yarn 简介"></a>3.1、Yarn 简介</h4><p>Yarn 是一个 JavaScript 的包管理器，它是由 Facebook、Google、Tilde 以及其他社区成员共同维护的开源项目。Yarn 在 NPM 的基础上进行了改进和增强，旨在提高依赖包的安装速度和可靠性。</p><p>相对于 NPM，Yarn 有以下几个特点：</p><p>快速：Yarn 通过并行安装依赖包，从而比 NPM 更快地完成依赖包的安装。<br>可靠：Yarn 会生成一个锁定文件（yarn.lock），确保每次安装的依赖包版本是相同的，从而避免了版本不一致的问题。<br>安全：Yarn 通过对依赖包的哈希校验，确保安装的依赖包是安全的，并且没有被篡改。<br>离线模式：Yarn 可以在没有网络的情况下运行，从而提高了开发者的灵活性。<br>需要注意的是，Yarn 和 NPM 本质上都是包管理工具，它们都可以管理 JavaScript 项目的依赖包。在使用 Yarn 或 NPM 时，建议了解其使用方法和命令，以便更好地管理项目的依赖包。</p><h5 id="3-2、Yarn-安装"><a href="#3-2、Yarn-安装" class="headerlink" title="3.2、Yarn 安装"></a>3.2、Yarn 安装</h5><p>如果您已经安装了 Node.js，可以通过 npm 来安装 Yarn。通过 npm 安装 Yarn 有两种方式：</p><h6 id="1、全局安装"><a href="#1、全局安装" class="headerlink" title="1、全局安装"></a>1、全局安装</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 全局安装</span><br>npm <span class="hljs-keyword">install</span> -g yarn<br><br><span class="hljs-comment"># 查看 Yarn 版本信息</span><br>yarn -v<br><br></code></pre></td></tr></table></figure><p>这种方式会将 Yarn 安装到全局环境中，从而可以在任意位置使用 yarn 命令。</p><h6 id="2、本地安装"><a href="#2、本地安装" class="headerlink" title="2、本地安装"></a>2、本地安装</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 本地安装</span><br>npm <span class="hljs-keyword">install</span> yarn<br><br><span class="hljs-comment"># 查看 Yarn 版本信息</span><br>yarn -v<br><br></code></pre></td></tr></table></figure><p>这种方式会将 Yarn 安装到当前目录的 node_modules 文件夹中。可以通过 .&#x2F;node_modules&#x2F;yarn&#x2F;bin&#x2F;yarn 命令来运行 Yarn。</p><p><strong>注意：可以使用以下命令来安装特定版本的 Yarn</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 查看可用的 Yarn 版本</span><br><span class="hljs-built_in">npm</span> view yarn versions<br><br><span class="hljs-comment"># 全局安装特定版本</span><br><span class="hljs-built_in">npm</span> install -g yarn@&lt;version&gt;<br><br><span class="hljs-comment"># 本地安装特定版本</span><br><span class="hljs-built_in">npm</span> install yarn@&lt;version&gt;<br><br><span class="hljs-comment"># 查看 Yarn 版本信息</span><br>yarn -v<br><br></code></pre></td></tr></table></figure><h5 id="3-3、Yarn-常用命令"><a href="#3-3、Yarn-常用命令" class="headerlink" title="3.3、Yarn 常用命令"></a>3.3、Yarn 常用命令</h5><p>下面列举一些常用的 Yarn 命令及其详细介绍：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1、该命令将引导您创建一个新的 package.json 文件。您可以提供一些信息，例如项目名称、版本号、作者、描述等。</span><br>yarn init<br><br><span class="hljs-comment"># 2、该命令将安装指定的软件包并将其添加到项目依赖项中。您可以使用 @ 版本前缀来安装特定版本的软件包。例如：yarn add package@1.0.0。</span><br>yarn <span class="hljs-built_in">add</span> [package]<br><br><span class="hljs-comment"># 3、该命令将从项目依赖项中删除指定的软件包。</span><br>yarn <span class="hljs-built_in">remove</span> [package]<br><br><span class="hljs-comment"># 4、该命令将更新指定软件包的版本。您可以使用 @ 版本前缀来更新特定版本的软件包。例如：yarn upgrade package@1.0.0。</span><br>yarn<span class="hljs-built_in"> upgrade </span>[package]<br><br><span class="hljs-comment"># 5、该命令将根据项目中的 package.json 文件安装所有依赖项。如果您在运行时指定了 --production 标志，则只会安装生产依赖项。</span><br>yarn install<br><br><span class="hljs-comment"># 6、该命令将清除 Yarn 的缓存。这可能会释放一些磁盘空间并解决某些依赖项问题。</span><br>yarn cache clean<br><br><span class="hljs-comment"># 7、该命令将全局安装指定的软件包。这通常用于安装全局命令行工具。</span><br>yarn global <span class="hljs-built_in">add</span> [package]<br><br><span class="hljs-comment"># 8、该命令将从全局安装中删除指定的软件包。</span><br>yarn global <span class="hljs-built_in">remove</span> [package]<br><br><span class="hljs-comment"># 9、该命令将列出当前项目中的所有依赖项。</span><br>yarn list<br><br><span class="hljs-comment"># 10、该命令将运行项目中指定的脚本。例如：yarn run start。</span><br>yarn <span class="hljs-built_in">run</span> [script]<br><br><span class="hljs-comment"># 11、该命令将运行项目中的测试脚本。</span><br>yarn test<br><br><span class="hljs-comment"># 12、该命令将根据项目中的配置文件构建项目。</span><br>yarn build<br><br><span class="hljs-comment"># 13、该命令将发布您的软件包到 Yarn 存储库中。</span><br>yarn publish<br><br><span class="hljs-comment"># 14、该命令将显示有关指定软件包的详细信息。</span><br>yarn <span class="hljs-built_in">info</span> [package]<br><br><span class="hljs-comment"># 15、该命令将使您登录到 Yarn 存储库。</span><br>yarn login<br><br><span class="hljs-comment"># 16、该命令将使您从 Yarn 存储库注销。</span><br>yarn logout<br><br><span class="hljs-comment"># 17、该命令将允许您将本地软件包链接到项目中。</span><br>yarn link [package]<br><br><span class="hljs-comment"># 18、该命令将从项目中取消链接指定的软件包。</span><br>yarn unlink [package]<br><br><span class="hljs-comment"># 19、该命令将显示指定软件包的依赖项信息。</span><br>yarn why [package]<br><br><span class="hljs-comment"># 20、该命令将显示项目依赖项的许可证信息。</span><br>yarn licenses ls<br><br><br></code></pre></td></tr></table></figure><p>以上是一些常用的 Yarn 命令及其详细介绍，可以根据您的需要选择使用。</p><h5 id="3-4、Yarn-创建项目"><a href="#3-4、Yarn-创建项目" class="headerlink" title="3.4、Yarn 创建项目"></a>3.4、Yarn 创建项目</h5><h6 id="3-4-1、yarn-create-vue-app"><a href="#3-4-1、yarn-create-vue-app" class="headerlink" title="3.4.1、yarn create vue-app"></a>3.4.1、yarn create vue-app</h6><p>yarn create vue-app 创建的是基于 Vue CLI 2.x 版本的项目，该版本的 Vue CLI 使用 webpack 进行打包，需要配置一些基本的项目信息和插件。</p><p>使用 yarn create vue-app 创建 Vue 2.x 项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 创建一个 Vue 2.x 项目</span><br>yarn create vue-app my-<span class="hljs-keyword">project</span><br><br><span class="hljs-comment"># 安装依赖</span><br>cd my-<span class="hljs-keyword">project</span><br>yarn <span class="hljs-keyword">install</span><br><br><span class="hljs-comment"># 运行项目</span><br>yarn serve<br><br></code></pre></td></tr></table></figure><h6 id="3-4-2、yarn-create-vite-app"><a href="#3-4-2、yarn-create-vite-app" class="headerlink" title="3.4.2、yarn create vite-app"></a>3.4.2、yarn create vite-app</h6><p>yarn create vite-app 创建的是基于 Vue CLI 3.x 版本的项目，该版本的 Vue CLI 使用了 vite 构建工具，具有更快的构建速度和更少的配置，适合较小的项目和快速原型开发。</p><p>使用 yarn create vite-app 创建 Vue 3.x 项目：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 创建一个 Vue 3.x 项目</span><br>yarn create vite-app <span class="hljs-keyword">my</span>-project <span class="hljs-comment">--template vue</span><br><br><span class="hljs-comment"># 安装依赖</span><br>cd <span class="hljs-keyword">my</span>-project<br>yarn install<br><br><span class="hljs-comment"># 运行项目</span><br>yarn serve<br><br></code></pre></td></tr></table></figure><p>在上面的命令中，my-project 是项目名称，可以根据实际情况进行更改。同时，–template 参数用于指定创建的项目模板，如果不指定，默认是 JavaScript 模板。对于 Vue 3.x 项目，需要指定 –template vue。</p><h4 id="4、PNPM"><a href="#4、PNPM" class="headerlink" title="4、PNPM"></a>4、PNPM</h4><h5 id="4-1、PNPM-简介"><a href="#4-1、PNPM-简介" class="headerlink" title="4.1、PNPM 简介"></a>4.1、PNPM 简介</h5><p>PNPM 是一个 Node.js 包管理工具，类似于 NPM 和 Yarn。PNPM 采用了一种不同于 NPM 和 Yarn 的方式来管理 Node.js 包，它使用硬链接来共享依赖包，从而减少了存储空间的占用和安装的时间。同时，PNPM 也可以像 NPM 和 Yarn 一样在全局和本地范围内安装和使用 Node.js 模块。PNPM 还提供了一些其他的功能，比如支持自动清理未使用的包，以及支持多个版本的 Node.js 和 NPM。</p><p>相比于 NPM 和 Yarn，PNPM 具有以下优点：</p><ul><li><p>节约磁盘空间：PNPM 使用硬链接来共享依赖包，因此只需要存储一份依赖包的副本，可以大大节约磁盘空间。</p></li><li><p>加速安装：PNPM 可以同时下载和安装多个依赖包，从而加速安装过程。</p></li><li><p>更好的稳定性：PNPM 可以在多个项目之间共享依赖包，从而减少了不同版本的包之间的冲突和版本不一致的问题。</p></li><li><h6 id="PNPM-的主要缺点是相对于-NPM-和-Yarn，它的社区和生态系统还比较小，因此在某些方面可能缺乏支持和文档。"><a href="#PNPM-的主要缺点是相对于-NPM-和-Yarn，它的社区和生态系统还比较小，因此在某些方面可能缺乏支持和文档。" class="headerlink" title="PNPM 的主要缺点是相对于 NPM 和 Yarn，它的社区和生态系统还比较小，因此在某些方面可能缺乏支持和文档。"></a>PNPM 的主要缺点是相对于 NPM 和 Yarn，它的社区和生态系统还比较小，因此在某些方面可能缺乏支持和文档。</h6></li></ul><h5 id="4-2、PNPM-安装"><a href="#4-2、PNPM-安装" class="headerlink" title="4.2、PNPM 安装"></a>4.2、PNPM 安装</h5><h6 id="1、使用-npm-全局安装"><a href="#1、使用-npm-全局安装" class="headerlink" title="1、使用 npm 全局安装"></a>1、使用 npm 全局安装</h6><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 使用 npm 全局安装</span><br>npm install -g pnpm<br><br><span class="hljs-comment"># 查看 pnpm 版本信息</span><br>pnpm <span class="hljs-comment">--version</span><br><br></code></pre></td></tr></table></figure><p>2、使用 yarn 全局安装</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 使用 yarn 全局安装</span><br>yarn <span class="hljs-built_in">global</span> <span class="hljs-built_in">add</span> pnpm<br><br><span class="hljs-comment"># 查看 pnpm 版本信息</span><br>pnpm <span class="hljs-comment">--version</span><br><br></code></pre></td></tr></table></figure><p><strong>注意：可以使用以下命令来安装特定版本的 pnpm</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 查看可用的 pnpm 版本</span><br>npm view pnpm versions<br><br><span class="hljs-comment"># 使用 npm 全局安装特定版本</span><br>npm install -g pnpm@&lt;<span class="hljs-built_in">version</span>&gt;<br><br><span class="hljs-comment"># 使用 npm 本地安装特定版本</span><br>npm install pnpm@&lt;<span class="hljs-built_in">version</span>&gt;<br><br><span class="hljs-comment"># 查看 pnpm 版本信息</span><br>pnpm <span class="hljs-comment">--version</span><br><br></code></pre></td></tr></table></figure><p>4.3、PNPM 常用命令<br>下面列举一些常用的 pnpm 命令及其详细介绍：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1、用于安装项目中的所有依赖。</span><br>pnpm install<br><br><span class="hljs-comment"># 2、用于安装指定的依赖包，例如 pnpm install react。</span><br>pnpm install [package]<br><br><span class="hljs-comment"># 3、用于全局安装指定的依赖包，例如 pnpm install --global typescript。</span><br>pnpm install --global [package]<br><br><span class="hljs-comment"># 4、用于更新项目中的所有依赖。</span><br>pnpm update<br><br><span class="hljs-comment"># 5、用于更新指定的依赖包，例如 pnpm update react。</span><br>pnpm update [package]<br><br><span class="hljs-comment"># 6、用于删除指定的依赖包，例如 pnpm remove react。</span><br>pnpm <span class="hljs-built_in">remove</span> [package]<br><br><span class="hljs-comment"># 7、用于列出当前项目中已安装的所有依赖包。</span><br>pnpm list<br><br><span class="hljs-comment"># 8、用于列出当前系统中已全局安装的所有依赖包。</span><br>pnpm list --global<br><br><span class="hljs-comment"># 9、用于列出当前项目中已安装的所有依赖包及其直接依赖项。</span><br>pnpm list <span class="hljs-attribute">--depth</span>=1<br><br><span class="hljs-comment"># 10、用于查看指定依赖包的详细信息，例如 pnpm info react。</span><br>pnpm <span class="hljs-built_in">info</span> [package]<br><br><span class="hljs-comment"># 11、用于将指定的依赖包添加到 devDependencies，例如 pnpm add jest --save-dev。</span><br>pnpm <span class="hljs-built_in">add</span> [package] --save-dev<br><br><span class="hljs-comment"># 12、用于将指定的依赖包添加到 dependencies，例如 pnpm add react --save。</span><br>pnpm <span class="hljs-built_in">add</span> [package] --save<br><br><span class="hljs-comment"># 13、用于全局安装指定的依赖包，例如 pnpm add typescript --global。</span><br>pnpm <span class="hljs-built_in">add</span> [package] --global<br><br><span class="hljs-comment"># 14、用于重新构建项目中的所有依赖。</span><br>pnpm rebuild<br><br><span class="hljs-comment"># 15、用于运行项目中的脚本命令，例如 pnpm run start。</span><br>pnpm <span class="hljs-built_in">run</span> [script]<br><br><span class="hljs-comment"># 16、用于查看本地包存储状态。</span><br>pnpm store status<br><br><span class="hljs-comment"># 17、用于清理本地存储的未被任何项目使用的包。</span><br>pnpm store prune<br><br><span class="hljs-comment"># 18、用于将指定的依赖包添加到本地存储，以便其他项目使用。</span><br>pnpm store <span class="hljs-built_in">add</span> [package]<br><br><span class="hljs-comment"># 19、用于启动本地包服务器。</span><br>pnpm<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># 20、用于在所有项目中执行指定命令，例如 pnpm recursive install。</span><br>pnpm recursive [command]<br><br><br></code></pre></td></tr></table></figure><p>以上是一些常用的 pnpm 命令及其详细介绍，可以根据您的需要选择使用。</p><h5 id="4-4、PNPM-创建项目"><a href="#4-4、PNPM-创建项目" class="headerlink" title="4.4、PNPM 创建项目"></a>4.4、PNPM 创建项目</h5><p>创建 Vue 项目的方式与 PNPM 无关，与使用的脚手架工具有关。</p><p>无论使用哪种方式创建 Vue 项目，都可以在项目目录下使用 PNPM 进行依赖安装。例如，在使用 Vue CLI 创建项目后，进入项目目录后可以使用 pnpm install 安装依赖。</p><h6 id="4-4-1、pnpm-create-vue-app"><a href="#4-4-1、pnpm-create-vue-app" class="headerlink" title="4.4.1、pnpm create vue-app"></a>4.4.1、pnpm create vue-app</h6><p>pnpm create vue-app 创建的是基于 Vue CLI 2.x 版本的项目，该版本的 Vue CLI 使用 webpack 进行打包，需要配置一些基本的项目信息和插件。</p><p>使用 pnpm create vue-app 创建 Vue 2.x 项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 创建一个 Vue 2.x 项目</span><br>pnpm create vue-app my-<span class="hljs-keyword">project</span><br><br><span class="hljs-comment"># 安装依赖</span><br>cd my-<span class="hljs-keyword">project</span><br>pnpm <span class="hljs-keyword">install</span><br><br><span class="hljs-comment"># 运行项目</span><br>pnpm serve<br><br></code></pre></td></tr></table></figure><p>4.4.2、pnpm create vite-app<br>pnpm create vite-app 创建的是基于 Vue CLI 3.x 版本的项目，该版本的 Vue CLI 使用了 vite 构建工具，具有更快的构建速度和更少的配置，适合较小的项目和快速原型开发。</p><p>使用 pnpm create vite-app 创建 Vue 3.x 项目：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 创建一个 Vue 3.x 项目</span><br>pnpm create vite-app <span class="hljs-keyword">my</span>-project <span class="hljs-comment">--template vue</span><br><br><span class="hljs-comment"># 安装依赖</span><br>cd <span class="hljs-keyword">my</span>-project<br>pnpm install<br><br><span class="hljs-comment"># 运行项目</span><br>pnpm serve<br><br></code></pre></td></tr></table></figure><p>在上面的命令中，my-project 是项目名称，可以根据实际情况进行更改。同时，–template 参数用于指定创建的项目模板，如果不指定，默认是 JavaScript 模板。对于 Vue 3.x 项目，需要指定 –template vue。</p><h4 id="5、每日一记"><a href="#5、每日一记" class="headerlink" title="5、每日一记"></a>5、每日一记</h4><h5 id="5-1、server-和-run-dev"><a href="#5-1、server-和-run-dev" class="headerlink" title="5.1、server 和 run dev"></a>5.1、server 和 run dev</h5><h6 id="5-1-1、yarn-serve-和-yarn-run-dev"><a href="#5-1-1、yarn-serve-和-yarn-run-dev" class="headerlink" title="5.1.1、yarn serve 和 yarn run dev"></a>5.1.1、yarn serve 和 yarn run dev</h6><p>yarn serve 和 yarn run dev 都是用来启动前端项目开发环境的命令，但是对应的使用场景和实现方式不同。</p><p>通常情况下，yarn run dev 是在 package.json 文件中配置的一个脚本命令，用于启动开发环境的服务。比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server --open&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>在上面的示例中，运行 yarn run dev 命令时，实际上执行的是 webpack-dev-server –open 命令，用于启动一个开发环境的服务器，实时监控文件变化并重新构建项目。</p><p>而 yarn serve 则是一个独立的命令，需要先安装 serve 这个包。它的作用也是启动一个本地服务器，用于开发环境的调试和测试。例如，我们可以通过以下命令来安装和使用 serve：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 安装 serve 包</span><br>yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> serve<br><br><span class="hljs-meta"># 在当前目录启动一个服务器，默认使用 5000 端口</span><br>yarn serve<br><br></code></pre></td></tr></table></figure><p>在默认情况下，yarn serve 会在当前目录下启动一个本地服务器，可以在浏览器中通过 <a href="http://localhost:5000/">http://localhost:5000</a> 访问。与 yarn run dev 相比，yarn serve 不需要在项目中配置脚本命令，更加方便快捷。</p><h6 id="5-1-2、pnpm-server-和-pnpm-run-dev"><a href="#5-1-2、pnpm-server-和-pnpm-run-dev" class="headerlink" title="5.1.2、pnpm server 和 pnpm run dev"></a>5.1.2、pnpm server 和 pnpm run dev</h6><p>pnpm server 和 pnpm run dev 都是运行项目的命令，但是具体的区别取决于项目的配置文件和脚本配置。</p><p>通常来说，pnpm run dev 是在项目中定义的脚本命令，用于在开发模式下启动项目。开发模式一般会启用热更新、调试模式等功能，方便开发人员实时调试和查看项目的效果。</p><p>而 pnpm server 则是一个比较通用的命令，可以在终端中直接输入来启动一个 web 服务器，并将当前目录作为网站的根目录。该命令不仅仅可以用于前端项目，还可以用于一些静态网站的开发和部署。</p><p>需要注意的是，具体命令的使用方式和效果取决于项目的具体配置和脚本命令，如果不确定应该使用哪个命令，可以参考项目的文档或者询问开发人员。</p><h5 id="5-2、Node-js、Vue-js、npm、Yarn-和-PNPM-之间版本关系"><a href="#5-2、Node-js、Vue-js、npm、Yarn-和-PNPM-之间版本关系" class="headerlink" title="5.2、Node.js、Vue.js、npm、Yarn 和 PNPM 之间版本关系"></a>5.2、Node.js、Vue.js、npm、Yarn 和 PNPM 之间版本关系</h5><p>不同版本的 Node.js、Vue.js、npm、Yarn 和 PNPM 之间是有关联的。下面是它们之间的关系总结：</p><h6 id="5-2-1、Node-js-版本和-Vue-js-版本的关联"><a href="#5-2-1、Node-js-版本和-Vue-js-版本的关联" class="headerlink" title="5.2.1、Node.js 版本和 Vue.js 版本的关联"></a>5.2.1、Node.js 版本和 Vue.js 版本的关联</h6><p>Node.js 版本和 Vue.js 版本之间存在一定的关联，不同的 Vue.js 版本对 Node.js 版本有不同的要求。具体来说，Vue.js 2.x.x 支持的 Node.js 版本为 8.9 或更高版本，Vue.js 3.x.x 支持的 Node.js 版本为 10 或更高版本。</p><p>Node.js 是 Vue.js 的运行环境，因此 Vue.js 的版本兼容性取决于Node.js 的版本兼容性。</p><p>需要注意的是，Node.js 版本过低或过高都可能导致 Vue.js 项目无法正常运行。因此，在使用 Vue.js 时，需要根据具体的 Vue.js 版本要求选择合适的 Node.js 版本，并且保持 Node.js 版本的稳定性和更新。</p><h6 id="5-2-2、Node-js-版本和-npm版本的关联"><a href="#5-2-2、Node-js-版本和-npm版本的关联" class="headerlink" title="5.2.2、Node.js 版本和 npm版本的关联"></a>5.2.2、Node.js 版本和 npm版本的关联</h6><p>Node.js 版本和 npm 版本有一定的关联性，因为 npm 是随 Node.js 一起安装的。通常情况下，当你升级 Node.js 时，npm 的版本也会随之更新。但是，有时候可能需要手动升级 npm 版本，以满足项目的需求。</p><p>通过 node -v 命令查看安装的 Node.js 版本，再通过 npm -v 命令查看对应的 npm 版本。</p><p>需要注意的是，在 Node.js v0.6.x 及以下版本中，npm 是一个独立的包管理器，需要手动安装和升级。从 Node.js v0.8.x 开始，npm 被作为默认的包管理器一同安装。因此，在这些较老的 Node.js 版本中，可能需要手动安装或升级 npm 版本。</p><h6 id="5-2-3、Node-js-版本和-Yarn-版本的关联"><a href="#5-2-3、Node-js-版本和-Yarn-版本的关联" class="headerlink" title="5.2.3、Node.js 版本和 Yarn 版本的关联"></a>5.2.3、Node.js 版本和 Yarn 版本的关联</h6><p>Yarn 是一款独立于 Node.js 的包管理工具，但它需要 Node.js 的运行环境。</p><p>Node.js 版本和 Yarn 版本的关联如下：</p><p>Yarn 1.x.x 版本要求 Node.js 版本 &gt;&#x3D; 10.13.0 。</p><p>Yarn 2.x.x 版本要求 Node.js 版本 &gt;&#x3D; 12.13.0 。</p><p>这是因为 Yarn 2.x.x 版本使用了 Node.js 12.x.x 的新特性，而旧版 Node.js 不支持这些特性。因此，在安装 Yarn 2.x.x 之前，必须先安装 Node.js 12.13.0 或更高版本。</p><p>需要注意的是，不同操作系统下 Yarn 的最新版本可能不同，因此在安装 Yarn 时需要根据自己的操作系统和 Node.js 版本选择合适的 Yarn 版本。</p><h6 id="5-2-4、Node-js-版本和-PNPM-版本的关联"><a href="#5-2-4、Node-js-版本和-PNPM-版本的关联" class="headerlink" title="5.2.4、Node.js 版本和 PNPM 版本的关联"></a>5.2.4、Node.js 版本和 PNPM 版本的关联</h6><p>PNPM 是一款独立于 Node.js 的包管理工具，但它需要 Node.js 的运行环境。</p><p>Node.js 版本和 PNPM 版本的关联与 Node.js 版本和 npm 版本的关联类似，因为 PNPM 是基于 npm 的改进版本。所以，在安装 PNPM 时需要先安装 Node.js 和 npm。一般来说，PNPM 会支持与当前 Node.js 版本兼容的最新版本，具体兼容版本可以在 PNPM 的官方文档中查看。另外，PNPM 还提供了对特定 Node.js 版本的支持，可以使用 PNPM 的特定版本来安装适用于特定 Node.js 版本的 PNPM，例如使用 npm i -g <a href="mailto:&#112;&#x6e;&#112;&#109;&#x40;&#54;&#x2e;&#49;&#x34;&#46;&#49;&#x31;">&#112;&#x6e;&#112;&#109;&#x40;&#54;&#x2e;&#49;&#x34;&#46;&#49;&#x31;</a> 命令安装 PNPM 的 6.14.11 版本，以适用于 Node.js v14.x 的版本。总之，PNPM 的版本需要与当前的 Node.js 版本兼容，才能保证正常使用。</p><h6 id="5-2-5、Vue-js-版本和-npm、Yarn、PNPM-版本的关联"><a href="#5-2-5、Vue-js-版本和-npm、Yarn、PNPM-版本的关联" class="headerlink" title="5.2.5、Vue.js 版本和 npm、Yarn、PNPM 版本的关联"></a>5.2.5、Vue.js 版本和 npm、Yarn、PNPM 版本的关联</h6><p>Vue.js 版本和包管理工具（npm、Yarn、PNPM）的版本之间并没有直接的关联。Vue.js 官方会在每个版本发布时指定支持的 Node.js 版本和 npm 版本的最小要求，这些要求和包管理工具的版本没有直接的关系，但是包管理工具需要在指定的 Node.js 版本和 npm 版本的基础上运行才能正常工作。</p><p>比如，Vue.js 2.x 支持的最小 Node.js 版本是 4.0.0，支持的最小 npm 版本是 3.0.0。如果要使用 Yarn 或 PNPM 来管理依赖，需要确保安装的 Yarn 或 PNPM 版本能够在 Node.js 4.0.0 和 npm 3.0.0 的环境中正常工作。</p><p>需要注意的是，Vue CLI 的某些版本可能会要求使用特定版本的包管理工具。比如，Vue CLI 3.0 要求使用 Yarn 1.x，而不支持 Yarn 2.x。在使用 Vue CLI 时，建议查看官方文档中的要求和建议，以保证开发环境的兼容性。</p><h5 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h5><p>npm、yarn 和 pnpm 都是用于管理 JavaScript 包和依赖项的工具，它们之间有一些不同之处，下面是它们的对比总结：</p><p>安装依赖速度<br>npm 和 yarn 都需要下载和解压缩整个包，而 pnpm 则使用一种独特的方法来避免这个问题。它会将包存储在本地，并在项目中创建符号链接。这意味着使用 pnpm 时，不需要在本地下载重复的包，因此安装速度更快。</p><p>缓存机制<br>npm 和 yarn 都有自己的缓存机制，以便在安装依赖项时重新使用相同的依赖项，以节省时间和空间。pnpm 也有缓存机制，但与 npm 和 yarn 不同的是，它将包存储在本地，并使用符号链接将它们链接到项目中。这使得 pnpm 可以更快地重用依赖项，因为它们不需要从缓存中解压缩。</p><p>命令<br>npm、yarn 和 pnpm 都具有相似的命令，例如 install、remove、update等。它们之间的不同之处在于一些额外的命令，例如 yarn 有 workspace 命令，可用于处理多个包。</p><p>跨平台支持<br>npm 和 yarn 都支持跨平台，可在 Windows、macOS 和 Linux 上运行。pnpm 也支持跨平台，但在 Windows 上的性能可能会受到影响。</p><p>社区支持<br>npm 是最早推出的 JavaScript 包管理器之一，因此具有庞大的社区支持。yarn 也拥有庞大的社区，但相对于 npm 来说要小一些。pnpm 是最新的包管理器之一，因此相对于 npm 和 yarn 来说，它的社区支持要少一些。</p><p>总的来说，选择使用哪种包管理工具取决于个人需求和项目需求。如果需要快速安装依赖项并具有良好的缓存机制，则可以选择 pnpm。如果需要具有大量社区支持和广泛的生态系统，则可以选择 npm。如果需要支持工作区和锁定文件，则可以选择 yarn。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dubbo-admin安装（Windows)</title>
    <link href="/2023/09/07/dubbo-admin%E5%AE%89%E8%A3%85%EF%BC%88Windows/"/>
    <url>/2023/09/07/dubbo-admin%E5%AE%89%E8%A3%85%EF%BC%88Windows/</url>
    
    <content type="html"><![CDATA[<h1 id="dubbo-admin安装（Windows）"><a href="#dubbo-admin安装（Windows）" class="headerlink" title="dubbo-admin安装（Windows）"></a>dubbo-admin安装（Windows）</h1><p>一、环境介绍<br>Windows 10<br>Jdk1.8<br>Maven 3.6.3<br>zookeeper 3.6.2<br>dubbo 2.7<br>二、Zookeeper安装<br>1、zookeepr下载<br>zookeeper3.6.2 下载路径</p><p>[<a href="https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz]">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz]</a>: </p><p>2、zookeeper安装<br>下载完成后进行解压，解压后在目录下添加两个空文件夹，data和log</p><p>进入conf目录下，复制zoo_sample.cfg文件，并改名为zoo.cfg</p><p>配置zoo.cfg中的内容，其中主要就是配置刚才的data和log两个文件夹的路径，clientPort是zookeeper默认的服务端口。</p><p>最后的admin.serverPort不修改的话默认是8080，这将会导致与后面的dubbo admin web页面所使用的端口冲突，所以，这里需要修改成其他的值。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span># <span class="hljs-keyword">data</span> dir<br><span class="hljs-symbol">2 </span>dataDir=../<span class="hljs-keyword">data</span><br><span class="hljs-symbol">3 </span># <span class="hljs-keyword">log</span> dir<br><span class="hljs-symbol">4 </span>dataLogDir=../<span class="hljs-keyword">log</span><br><span class="hljs-symbol">5 </span># 默认为<span class="hljs-number">2181</span>，不用修改<br><span class="hljs-symbol">6 </span>clientPort=<span class="hljs-number">2181</span><br><span class="hljs-symbol">7 </span># 添加此配置项<br><span class="hljs-symbol">8 </span>admin.serverPort=<span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>3、启动zookeeper<br>进入bin目录，里面就是zookeeper的相关启动命令了，这里我们双击zkServer.cmd就能启动zookeeper的服务器了。</p><p>控制台显示 bind to port 0.0.0.0&#x2F;0.0.0.0:2181，表示服务端启动成功。</p><p>双击zkCli.cmd启动客户端，出现Welcome to ZooKeeper!表示启动成功</p><p>三、dubbo-admin安装<br>1、下载dubbo-admin<br>dubbo-admin下载地址</p><p>[<a href="https://github.com/apache/dubbo-admin/tree/develop]">https://github.com/apache/dubbo-admin/tree/develop]</a>: </p><p>在GitHub上下载dubbo admin，选择zip压缩包方式下载</p><p>2、前端打包运行<br>dubbo-admin的新版本已经采用了前后端分离的方式，所以我们部署时也要采用这种方式</p><p>进入dubbo-admin-ui目录下，执行以下命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install<br><span class="hljs-built_in">npm</span> run dev<br></code></pre></td></tr></table></figure><p>npm run dev 成功后，会出现两个访问连接，点击任何一个都可以</p><p>3、后端打包运行<br>配置修改</p><p>进入目录 dubbo-admin-server&#x2F;src&#x2F;main&#x2F;resources，修改application.properties配置文件</p><p>这里对于zookeeper默认的端口是2183，之前我们配置zookeeper的时候，设置的是2181，所以需要将这里也改成2181，不然admin会找不到zookeeper服务器。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># centers in dubbo2.7</span><br>admin.registry.address=zookeeper:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br>admin.config-center=zookeeper:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br>admin.metadata-report.address=zookeeper:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>改完保存即可</p><p>4、打包运行<br>进入到dubbo-admin-server目录下，执行命令:</p><p>mvn clean package</p><p>最后看到BUILD SUCCESS说明构建成功了</p><p>构建成功后运行，进行到dubbo-admin-server\target的目录下，执行jar包:</p><p> java -jar dubbo-admin-server-0.2.0-SNAPSHOT.jar<br>jar包执行成功后，通过前端地址就可以进行访问了（<a href="http://localhost:8082/%EF%BC%89">http://localhost:8082/）</a></p><p>默认账号(root&#x2F;root)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio阿里镜像配置</title>
    <link href="/2023/09/07/Android-Studio%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/07/Android-Studio%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio阿里镜像配置"><a href="#Android-Studio阿里镜像配置" class="headerlink" title="Android Studio阿里镜像配置"></a>Android Studio阿里镜像配置</h1><p>如果你之前设置过 Android Studio 的 HTTP Proxy，然后又取消了代理设置，那么很有可能 Andoid Studio gradle 再次编译时仍然会走代理设置，造成依赖资源一直下载失败。<br>分为两种：</p><ul><li>单独工程配置镜像</li><li>整体工程配置</li></ul><h5 id="单独工程配置"><a href="#单独工程配置" class="headerlink" title="单独工程配置"></a>单独工程配置</h5><h6 id="1-删除-Android-Studio-的代理设置"><a href="#1-删除-Android-Studio-的代理设置" class="headerlink" title="1.删除 Android Studio 的代理设置"></a>1.删除 Android Studio 的代理设置</h6><p>首先你需要确认你已经在 Settings -&gt; Appearance&amp;Behavior -&gt; System Settings -&gt; HTTP Proxy 中选中了 No Proxy。</p><p>然后找到项目根目录下的 gradle.properties 文件，打开查看该文件中是否有关于 proxy 设置（代理的地址和端口）的相关语句，删除这些内容，让该文件看起来大致是这个样子（如果你没有添加其他设置的话）：</p><p>最后，你需要找到你的另一个 gradle.properties 文件：C:\Users\Administrator.gradle\gradle.properties：</p><p>打开该文件，和上面的操作一样，删除与 proxy 设置相关的语句，让该文件的内容看起来大致是这样（如果你没有添加其他设置的话）：</p><h6 id="2-让项目通过阿里云-maven-jcenter-下载依赖资源"><a href="#2-让项目通过阿里云-maven-jcenter-下载依赖资源" class="headerlink" title="2.让项目通过阿里云 maven jcenter 下载依赖资源"></a>2.让项目通过阿里云 maven jcenter 下载依赖资源</h6><p>打开项目根目录下的 build.gradle（Project:项目名称一级的gradle），如下所示添加阿里 maven 库地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml">// Top-level build file where you can add configuration options common to all sub-projects/modules.<br>buildscript &#123;<br>repositories &#123;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// 添加阿里云 maven 地址         <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    maven <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> url <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    maven <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> url <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// jcenter()<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>google<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>dependencies <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    classpath <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#x27;com.android.tools.build:gradle:3.2.1&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// NOTE: Do not place your application dependencies here; they belong<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// in the individual module build.gradle files<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#125;<br><br>allprojects &#123;<br>repositories &#123;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// 添加阿里云 maven 地址         <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    maven <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> url <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    maven <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> url <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>// jcenter()<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>google<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#125;<br><br>task clean(type: Delete) &#123;<br>delete rootProject.buildDir<br>&#125;<br></code></pre></td></tr></table></figure><p>重新 SYNC 项目，编译时的资源下载一般就会如丝般顺滑了。</p><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><h6 id="在C-Users-Administrator-gradle中新建init-gradle，并输入如下内容："><a href="#在C-Users-Administrator-gradle中新建init-gradle，并输入如下内容：" class="headerlink" title="在C:\Users\Administrator.gradle中新建init.gradle，并输入如下内容："></a>在C:\Users\Administrator.gradle中新建init.gradle，并输入如下内容：</h6><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">allprojects&#123;<br>    <span class="hljs-attribute">repositories &#123;</span><br><span class="hljs-attribute">        def ALIYUN_REPOSITORY_URL = &#x27;http</span>://maven<span class="hljs-variable">.aliyun</span><span class="hljs-variable">.com</span>/nexus/content/groups/public&#x27;<br>        def ALIYUN_JCENTER_URL = &#x27;http://maven<span class="hljs-variable">.aliyun</span><span class="hljs-variable">.com</span>/nexus/content/repositories/jcenter&#x27;<br>        all &#123; ArtifactRepository repo -&gt;<br>            if(repo instanceof MavenArtifactRepository)&#123;<br>                def url = repo<span class="hljs-variable">.url</span><span class="hljs-variable">.toString</span>()<br>                if (url<span class="hljs-variable">.startsWith</span>(&#x27;https://repo1<span class="hljs-variable">.maven</span><span class="hljs-variable">.org</span>/maven2&#x27;)) &#123;<br>                    project<span class="hljs-variable">.logger</span><span class="hljs-variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="hljs-variable">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;<br>                    remove repo<br>                &#125;<br>                if (url<span class="hljs-variable">.startsWith</span>(&#x27;https://jcenter<span class="hljs-variable">.bintray</span><span class="hljs-variable">.com</span>/&#x27;)) &#123;<br>                    project<span class="hljs-variable">.logger</span><span class="hljs-variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="hljs-variable">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.&quot;<br>                    remove repo<br>                &#125;<br>            &#125;<br>        &#125;<br>        maven &#123;<br>            url ALIYUN_REPOSITORY_URL<br>            url ALIYUN_JCENTER_URL<br>        &#125;<br>    &#125;<br>&#125;<br><br>allprojects&#123;<br>    repositories &#123;<br>        def ALIYUN_REPOSITORY_URL = &#x27;http://maven<span class="hljs-variable">.aliyun</span><span class="hljs-variable">.com</span>/nexus/content/groups/public&#x27;<br>        def ALIYUN_JCENTER_URL = &#x27;http://maven<span class="hljs-variable">.aliyun</span><span class="hljs-variable">.com</span>/nexus/content/repositories/jcenter&#x27;<br>        all &#123; ArtifactRepository repo -&gt;<br>            if(repo instanceof MavenArtifactRepository)&#123;<br>                def url = repo<span class="hljs-variable">.url</span><span class="hljs-variable">.toString</span>()<br>                if (url<span class="hljs-variable">.startsWith</span>(&#x27;https://repo1<span class="hljs-variable">.maven</span><span class="hljs-variable">.org</span>/maven2&#x27;)) &#123;<br>                    project<span class="hljs-variable">.logger</span><span class="hljs-variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="hljs-variable">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;<br>                    remove repo<br>                &#125;<br>                if (url<span class="hljs-variable">.startsWith</span>(&#x27;https://jcenter<span class="hljs-variable">.bintray</span><span class="hljs-variable">.com</span>/&#x27;)) &#123;<br>                    project<span class="hljs-variable">.logger</span><span class="hljs-variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="hljs-variable">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.&quot;<br>                    remove repo<br>                &#125;<br>            &#125;<br>        &#125;<br>        maven &#123;<br>            url ALIYUN_REPOSITORY_URL<br>            url ALIYUN_JCENTER_URL<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启Android Studio 并clean rebuild 即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wsl入门到精通</title>
    <link href="/2023/08/03/wsl%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <url>/2023/08/03/wsl%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="wsl入门"><a href="#wsl入门" class="headerlink" title="wsl入门"></a>wsl入门</h1><h5 id="wsl的基本命令"><a href="#wsl的基本命令" class="headerlink" title="wsl的基本命令"></a>wsl的基本命令</h5><p>以下 WSL 命令以 PowerShell 或 Windows 命令提示符支持的格式列出。 若要通过 Bash&#x2F;Linux 发行版命令行运行这些命令，必须将 wsl 替换为 wsl.exe。 若要获取完整的命令列表，请运行 wsl –help。</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>安装 WSL 和 Linux 的默认 Ubuntu 发行版。 了解详细信息。 还可以使用此命令通过运行 wsl –install <Distribution Name> 来安装其他 Linux 发行版。 若要获取发行版名称的有效列表，请运行 wsl –list –online。</p><p>选项包括：</p><ul><li><code>--distribution</code>：指定要安装的 Linux 发行版。 可以通过运行 <code>wsl --list --online</code> 来查找可用的发行版。</li><li><code>--no-launch</code>：安装 Linux 发行版，但不自动启动它。</li><li><code>--web-download</code>：通过联机渠道安装，而不是使用 Microsoft Store 安装。</li></ul><p>未安装 WSL 时，选项包括：</p><ul><li>–inbox：使用 Windows 组件（而不是 Microsoft Store）安装 WSL。 （WSL 更新将通过 Windows 更新接收，而不是通过 Microsoft Store 中推送的可用更新来接收）</li><li>–enable-wsl1：在安装 Microsoft Store 版本的 WSL 的过程中也启用“适用于 Linux 的 Windows 子系统”可选组件，从而#启用 WSL 1。</li><li>–no-distribution：安装 WSL 时不安装发行版。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl install<br></code></pre></td></tr></table></figure><h6 id="列出可用的-Linux-发行版"><a href="#列出可用的-Linux-发行版" class="headerlink" title="列出可用的 Linux 发行版"></a>列出可用的 Linux 发行版</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--list</span> <span class="hljs-literal">--online</span><br></code></pre></td></tr></table></figure><h6 id="列出已安装的-Linux-发行版"><a href="#列出已安装的-Linux-发行版" class="headerlink" title="列出已安装的 Linux 发行版"></a>列出已安装的 Linux 发行版</h6><p>查看安装在 Windows 计算机上的 Linux 发行版列表，其中包括状态（发行版是正在运行还是已停止）和运行发行版的 WSL 版本（WSL 1 或 WSL 2）。 比较 WSL 1 和 WSL 2。 此命令也可输入为：wsl -l -v。 可与 list 命令一起使用的其他选项包括：–all（列出所有发行版）、–running（仅列出当前正在运行的发行版）或 –quiet（仅显示发行版名称）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--list</span> <span class="hljs-literal">--verbose</span><br></code></pre></td></tr></table></figure><h6 id="将-WSL-版本设置为-1-或-2"><a href="#将-WSL-版本设置为-1-或-2" class="headerlink" title="将 WSL 版本设置为 1 或 2"></a>将 WSL 版本设置为 1 或 2</h6><p>#若要指定运行 Linux 发行版的 WSL 版本（1 或 2），请将 <distribution name> 替换为发行版的名称，并将 <versionNumber> 替换为 1 或 2。 比较 WSL 1 和 WSL 2。 WSL 2 仅在 Windows 11 或 Windows 10 版本 1903、内部版本 18362 或更高版本中可用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--set-version</span> &lt;distribution name&gt; &lt;versionNumber&gt;<br></code></pre></td></tr></table></figure><h6 id="设置默认-WSL-版本"><a href="#设置默认-WSL-版本" class="headerlink" title="设置默认 WSL 版本"></a>设置默认 WSL 版本</h6><p>若要将默认版本设置为 WSL 1 或 WSL 2，请将 <Version> 替换为数字 1 或 2，表示对于安装新的 Linux 发行版，你希望默认使用哪个版本的 WSL。 例如，wsl –set-default-version 2。 比较 WSL 1 和 WSL 2。 WSL 2 仅在 Windows 11 或 Windows 10 版本 1903、内部版本 18362 或更高版本中可用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--set-default-version</span> &lt;Version&gt;<br></code></pre></td></tr></table></figure><h6 id="设置默认-Linux-发行版"><a href="#设置默认-Linux-发行版" class="headerlink" title="设置默认 Linux 发行版"></a>设置默认 Linux 发行版</h6><p>若要设置 WSL 命令将用于运行的默认 Linux 发行版，请将 <Distribution Name> 替换为你首选的 Linux 发行版的名称。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--set-default</span> &lt;Distribution Name&gt;<br></code></pre></td></tr></table></figure><h6 id="将目录更改为主页"><a href="#将目录更改为主页" class="headerlink" title="将目录更改为主页"></a>将目录更改为主页</h6><p>~ 可与 wsl 一起使用，以在用户的主目录中启动。 若要在 WSL 命令提示符中从任何目录跳回到主目录，可使用命令 cd ~。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl ~<br></code></pre></td></tr></table></figure><h6 id="通过-PowerShell-或-CMD-运行特定的-Linux-发行版"><a href="#通过-PowerShell-或-CMD-运行特定的-Linux-发行版" class="headerlink" title="通过 PowerShell 或 CMD 运行特定的 Linux 发行版"></a>通过 PowerShell 或 CMD 运行特定的 Linux 发行版</h6><p>若要通过特定用户运行特定 Linux 发行版，请将 <Distribution Name> 替换为你首选的 Linux 发行版的名称（例如 Debian），将 <User Name> 替换为现有用户的名称（例如 root）。 如果 WSL 发行版中不存在该用户，你将会收到一个错误。 若要输出当前用户名，请使用 whoami 命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--distribution</span> &lt;Distribution Name&gt; <span class="hljs-literal">--user</span> &lt;User Name&gt;<br></code></pre></td></tr></table></figure><h6 id="更新-WSL"><a href="#更新-WSL" class="headerlink" title="更新 WSL"></a>更新 WSL</h6><p>将 WSL 版本更新到最新版本。 选项包括：</p><ul><li>–web-download：从 GitHub 而不是 Microsoft Store 下载最新更新。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--update</span><br></code></pre></td></tr></table></figure><h6 id="检查-WSL-状态"><a href="#检查-WSL-状态" class="headerlink" title="检查 WSL 状态"></a>检查 WSL 状态</h6><p>查看有关 WSL 配置的常规信息，例如默认发行版类型、默认发行版和内核版本。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--status</span><br></code></pre></td></tr></table></figure><h6 id="检查-WSL-版本"><a href="#检查-WSL-版本" class="headerlink" title="检查 WSL 版本"></a>检查 WSL 版本</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>wsl入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window 平台 git 配置多个账号的 ssh-key</title>
    <link href="/2023/08/02/window-%E5%B9%B3%E5%8F%B0-git-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%B4%A6%E5%8F%B7%E7%9A%84-ssh-key/"/>
    <url>/2023/08/02/window-%E5%B9%B3%E5%8F%B0-git-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%B4%A6%E5%8F%B7%E7%9A%84-ssh-key/</url>
    
    <content type="html"><![CDATA[<h1 id="window-平台-git-配置多个账号的-ssh-key"><a href="#window-平台-git-配置多个账号的-ssh-key" class="headerlink" title="window 平台 git 配置多个账号的 ssh-key"></a>window 平台 git 配置多个账号的 ssh-key</h1><h5 id="配置单个账号的-ssh-key"><a href="#配置单个账号的-ssh-key" class="headerlink" title="配置单个账号的 ssh-key"></a>配置单个账号的 ssh-key</h5><p>创建一个 gitlab 的 ssh-key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮箱账号&quot;</span><br><span class="hljs-comment"># 然后一路按回车键</span><br></code></pre></td></tr></table></figure><p>然后会在: ~&#x2F;.ssh&#x2F; 目录下看到生成的秘钥文件, 密钥文件一般存放在: C:Usersusername.ssh 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看秘钥</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>把秘钥在 gitlab 上添加好了后, 验证是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@gitlab.com<br>Hi ****! You<span class="hljs-string">&#x27;ve successfully authenticated, but Gitlab does not provide shell access.</span><br></code></pre></td></tr></table></figure><h5 id="配置多个账号的-ssh-key"><a href="#配置多个账号的-ssh-key" class="headerlink" title="配置多个账号的 ssh-key"></a>配置多个账号的 ssh-key</h5><p>比如说在上一步的基础上, 再创建一个 github 的 ssh-key</p><p>第一步, 生成秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮箱账号&quot;</span><br><span class="hljs-comment"># 回车后会要求输入秘钥文件的名字, 为了作区分, 可以自己定义一个名字</span><br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/Gato/.ssh/id_rsa): github_private_id_rsa<br><span class="hljs-comment"># 然后一路按回车</span><br></code></pre></td></tr></table></figure><p>创建配置文件(命令行操作也可换成手动创建, 秘钥存放位置一般在 C:Usersusername.ssh 文件夹下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入到秘钥文件夹下</span><br><span class="hljs-built_in">cd</span> ~/.ssh/<br><span class="hljs-comment"># 创建配置文件, 进入到 vim 编辑器 </span><br>vim config<br></code></pre></td></tr></table></figure><p>config 文件配置(IdentityFile 改成自己密钥文件的实际位置):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/.ssh/config 配置多个git的ssh-key</span><br><span class="hljs-comment"># 第一个默认的SSH Key</span><br>Host gitlab.com<br>HostName gitlab.com<br>IdentityFile C:Usersusername.sshid_rsa<br>PreferredAuthentications publickey<br><br><span class="hljs-comment"># 第二个SSH Key</span><br>Host github.com<br>HostName github.com<br>IdentityFile C:Usersusername.sshgitlab_private_id_rsa<br>PreferredAuthentications publickey<br></code></pre></td></tr></table></figure><p>验证是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br>Hi ****! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>myblog1</title>
    <link href="/2023/08/02/myblog1/"/>
    <url>/2023/08/02/myblog1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>myblog</title>
    <link href="/2023/08/02/myblog/"/>
    <url>/2023/08/02/myblog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git入门文档</title>
    <link href="/2023/08/01/git%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/"/>
    <url>/2023/08/01/git%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>学习git之前，我们需要先明白一个概念</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ol><li><h5 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h5></li></ol><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p><img src="https://s1.ax1x.com/2023/06/20/pC8FnfK.md.jpg" alt="pC8FnfK.md.jpg" style="zoom: 50%;" /><p>多人开发就必须要使用版本控制！</p><h2 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h2><p>我们学习的东西，一定是当下最流行的！</p><p>主流的版本控制器有如下这些：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><p><strong>1、本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><a href="https://imgse.com/i/pC8i4ot"><img src="https://s1.ax1x.com/2023/06/20/pC8i4ot.png" alt="pC8i4ot.png"></a></p><p><strong>2、集中版本控制  SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="https://s1.ax1x.com/2023/06/20/pC8iHSS.png" alt="pC8iHSS.png">](<a href="https://imgse.com/i/pC8iHSS">https://imgse.com/i/pC8iHSS</a>)</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><p><strong>3、分布式版本控制 Git</strong></p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><p><a href="https://imgse.com/i/pC8iqyQ"><img src="https://s1.ax1x.com/2023/06/20/pC8iqyQ.png" alt="pC8iqyQ.png"></a></p><h2 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>![图片](data:image&#x2F;svg+xml,%3C%3Fxml version&#x3D;’1.0’ encoding&#x3D;’UTF-8’%3F%3E%3Csvg width&#x3D;’1px’ height&#x3D;’1px’ viewBox&#x3D;’0 0 1 1’ version&#x3D;’1.1’ xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ xmlns:xlink&#x3D;’<a href="http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke&#x3D;’none’ stroke-width&#x3D;’1’ fill&#x3D;’none’ fill-rule&#x3D;’evenodd’ fill-opacity&#x3D;’0’%3E%3Cg transform&#x3D;’translate(-249.000000, -126.000000)’ fill&#x3D;’%23FFFFFF’%3E%3Crect x&#x3D;’249’ y&#x3D;’126’ width&#x3D;’1’ height&#x3D;’1’%3E%3C&#x2F;rect%3E%3C&#x2F;g%3E%3C&#x2F;g%3E%3C&#x2F;svg%3E)</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><h5 id="Git是目前世界上最先进的分布式版本控制系统。"><a href="#Git是目前世界上最先进的分布式版本控制系统。" class="headerlink" title="Git是目前世界上最先进的分布式版本控制系统。"></a>Git是目前世界上最先进的分布式版本控制系统。</h5><p>聊聊Git的历史</p><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><p><a href="https://imgse.com/i/pC8ibQg"><img src="https://s1.ax1x.com/2023/06/20/pC8ibQg.png" alt="pC8ibQg.png"></a></p><p>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p><p>Git环境配置</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！安装完毕就可以使用了！</p><h2 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h2><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p><p><a href="https://imgse.com/i/pC8ioJf"><img src="https://s1.ax1x.com/2023/06/20/pC8ioJf.png" alt="pC8ioJf.png"></a></p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD：</strong>Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><h2 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h2><p>平时一定要多使用这些基础的命令！</p><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf / 切勿在Linux中尝试！删除电脑中全部文件！<br></code></pre></td></tr></table></figure><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端&#x2F;清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>所有的配置文件，其实都保存在本地！</p><p>查看配置 git config -l</p><p><a href="https://imgse.com/i/pC8iTW8"><img src="https://s1.ax1x.com/2023/06/20/pC8iTW8.md.png" alt="pC8iTW8.md.png"></a></p><p>查看不同级别的配置文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#查看系统config</span><br>git config <span class="hljs-params">--system</span> <span class="hljs-params">--list</span>　<br><span class="hljs-comment">#查看当前用户（global）配置</span><br>git config <span class="hljs-params">--global</span>  <span class="hljs-params">--list</span><br></code></pre></td></tr></table></figure><p><strong>Git相关的配置文件：</strong></p><p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p><p>2）、C:\Users\Administrator\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p><h2 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;kuangshen&quot;</span>  <span class="hljs-meta">#名称</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-number">24736743</span><span class="hljs-symbol">@qq</span>.com  <span class="hljs-meta">#邮箱</span><br></code></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><p>Git基本理论（重要）</p><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><a href="https://imgse.com/i/pC8iLLj"><img src="https://s1.ax1x.com/2023/06/20/pC8iLLj.png" alt="pC8iLLj.png"></a></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><a href="https://imgse.com/i/pC8iXes"><img src="https://s1.ax1x.com/2023/06/20/pC8iXes.png" alt="pC8iXes.png"></a></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><a href="https://imgse.com/i/pC8ivoq"><img src="https://s1.ax1x.com/2023/06/20/pC8ivoq.jpg" alt="pC8ivoq.jpg"></a></p><p>Git项目搭建</p><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><a href="https://imgse.com/i/pC8ijwn"><img src="https://s1.ax1x.com/2023/06/20/pC8ijwn.png" alt="pC8ijwn.png"></a></p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br><span class="hljs-variable">$ </span>git init<br></code></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 克隆一个项目和它的整个代码历史(版本信息)</span><br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>] <br><span class="hljs-comment"># https://gitee.com/kuangstudy/openclass.git</span><br></code></pre></td></tr></table></figure><p>2、去 gitee 或者 github 上克隆一个测试！</p><p>Git文件操作</p><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查看指定文件状态</span><br><span class="hljs-attribute">git</span> status<span class="hljs-meta"> [filename]</span><br><span class="hljs-comment">#查看所有文件状态</span><br><span class="hljs-attribute">git</span> status<br><span class="hljs-comment"># git add .                  添加所有文件到暂存区</span><br><span class="hljs-comment"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></code></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#为注释</span><br>*.txt        <span class="hljs-comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br>!lib.txt     <span class="hljs-comment">#但lib.txt除外</span><br>/temp        <span class="hljs-comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br>build<span class="hljs-regexp">/       #忽略build/</span>目录下的所有文件<br>doc<span class="hljs-regexp">/*.txt    #会忽略 doc/</span>notes.txt 但不包括 doc<span class="hljs-regexp">/server/</span>arch.txt<br></code></pre></td></tr></table></figure><p>使用码云</p><h2 id="github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器"><a href="#github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器" class="headerlink" title="github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器"></a>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器</h2><p>这个其实可以作为大家未来找工作的一个重要信息！</p><p>1、注册登录码云，完善个人信息</p><p>2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-meta"># 生成公钥</span><br>ssh-keygen<br></code></pre></td></tr></table></figure><p>3、将公钥信息public key 添加到码云账户中即可！</p><p>4、使用码云创建一个自己的仓库！</p><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，…  限制！</p><p>克隆到本地！</p><p>IDEA中集成Git</p><p>1、新建项目，绑定git。</p><p>注意观察idea中的变化</p><p>2、修改文件，使用IDEA操作git。</p><ul><li>添加到暂存区</li><li>commit 提交</li><li>push到远程仓库</li></ul><p>3、提交测试</p><p>这些都是单个人的操作！</p><p>学习的方式最重要！学会学习！我上课的更多时候都是在教大家去学习一种理念和思想（学习方式）</p><p>有道无术、术尚可求。有术无道、止于术！</p><p>真正的教学，授人以渔！</p><h2 id="说明：GIT分支"><a href="#说明：GIT分支" class="headerlink" title="说明：GIT分支"></a>说明：GIT分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p>git分支中常用指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge [branch]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span><br></code></pre></td></tr></table></figure><p>IDEA中操作</p><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><p>作业练习：找一个小伙伴，一起搭建一个远程仓库，来练习Git！</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SpringBoot+Vue的学生选课管理系统</title>
    <link href="/2023/08/01/springboot+vue%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/08/01/springboot+vue%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="基于SpringBoot-Vue的学生选课管理系统"><a href="#基于SpringBoot-Vue的学生选课管理系统" class="headerlink" title="基于SpringBoot+Vue的学生选课管理系统"></a>基于SpringBoot+Vue的学生选课管理系统</h1><h4 id="1、项目介绍"><a href="#1、项目介绍" class="headerlink" title="1、项目介绍"></a>1、项目介绍</h4><p>基于SpringBoot+Vue的学生选课管理系统采用前后端分离的架构方式，系统分为管理员、老师、学生等三种角色， 权限分配如下</p><p>管理员拥有所有权限:</p><ul><li>学生管理：可以对所有学生进行管理操作（新增学生、修改学生、删除学生）</li><li>教师管理：可以对所有教师进行管理操作（新增教师、修改教师、删除教师）</li><li>课程管理：可以对所有课程进行管理操作（新增课程、修改课程、删除课程）</li><li>开课表管理：对已开课进行管理（删除开课，搜索）</li><li>学生成绩管理：查询所有学生成绩，成绩录入等操作</li></ul><p>教师拥有部分权限</p><ul><li>教师编辑：编辑教师本人的信息</li><li>课程设置：查看自己开设的课程，选择课程并开课</li><li>教师成绩管理：可以查看并录入学生成绩</li></ul><p>学生拥有部分权限</p><ul><li>学生编辑：编辑本人的信息</li><li>选课管理：学生可以进行选课，以及对已选则的课表进行查看</li><li>学生成绩管理：查询学生本人的成绩</li></ul><h4 id="2、技术选型"><a href="#2、技术选型" class="headerlink" title="2、技术选型"></a>2、技术选型</h4><p>项目运行环境：mysql5.7 + idea + node + windows10</p><p>服务端技术选型：SpringBoot + Mybatis + mysql</p><p>前端技术选型及js库：Vue + ElementUI + axios</p><h4 id="3、成果展示"><a href="#3、成果展示" class="headerlink" title="3、成果展示"></a>3、成果展示</h4><ul><li>登陆界面</li></ul><p><a href="https://imgse.com/i/pCmu9un"><img src="https://s1.ax1x.com/2023/06/13/pCmu9un.png" alt="pCmu9un.png"></a></p><ul><li>系统管理员登陆界面</li></ul><p><a href="https://imgse.com/i/pCmuCBq"><img src="https://s1.ax1x.com/2023/06/13/pCmuCBq.png" alt="pCmuCBq.png"></a></p><ul><li>教师登陆界面</li></ul><p><a href="https://imgse.com/i/pCmnzcj"><img src="https://s1.ax1x.com/2023/06/13/pCmnzcj.png" alt="pCmnzcj.png"></a></p><ul><li>学生登陆界面</li></ul><p><a href="https://imgse.com/i/pCmu9un"><img src="https://s1.ax1x.com/2023/06/13/pCmu9un.png" alt="pCmu9un.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot+vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网上书城项目</title>
    <link href="/2023/08/01/%E5%8F%AE%E5%BD%93%E4%B9%A6%E5%9F%8E/"/>
    <url>/2023/08/01/%E5%8F%AE%E5%BD%93%E4%B9%A6%E5%9F%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="网上书城项目"><a href="#网上书城项目" class="headerlink" title="网上书城项目"></a>网上书城项目</h1><h2 id="一、项目功能"><a href="#一、项目功能" class="headerlink" title="一、项目功能"></a>一、项目功能</h2><h3 id="1-前台功能"><a href="#1-前台功能" class="headerlink" title="1.前台功能"></a>1.前台功能</h3><ol><li>图书基本展示,包括推荐图书展示和类图书类型展示.</li><li>推荐图书包括条幅推荐,热销推荐和新品推荐.</li><li>按照图书类型展示商品.</li><li>图书详细信息展示.</li><li>图书加入购物车.</li><li>修改购物车内图书信息,例如数量等.</li><li>用户登录.</li><li>用户注册.</li><li>修改个人信息,包括密码和收获信息.</li><li>购物车付款.</li><li>用户订单查询.</li><li>根据关键字搜索图书.</li></ol><h3 id="2-后台功能"><a href="#2-后台功能" class="headerlink" title="2.后台功能"></a>2.后台功能</h3><p><em>当管理员用户登录后会显示后台管理按钮,点击进入后台管理页面</em></p><ol><li>订单操作:包括按状态查询订单,修改订单状态(发货,完成,删除).</li><li>用户操作:包括查询所有用户,新增用户,修改用户密码,修改用户信息和删除用户.</li><li>图书类目操作:包括查看所有类目,增加图书类目,修改图书类目信息以及删除图书类目.</li><li>图书操作:包括查询所有图书,新增图书,修改现有图书信息以及删除图书.</li></ol><p><em>注意,删除用户时需要先删除用户下的所有订单，才可以删除用户。删除图书类目时，要先删除类目下的图书，才能删除图书类目。删除商品时，可直接删除，他的推荐信息也会直接删除!（不要问为什么做的这么蠢，当时脑子抽风了！）</em></p><h2 id="二、项目开发环境"><a href="#二、项目开发环境" class="headerlink" title="二、项目开发环境"></a>二、项目开发环境</h2><ol><li>项目使用IDEA 2018.3.5进行开发。</li><li>Maven版本为 3.6.2。</li><li>Tomcat版本为 8.5.42。</li><li>数据库为mysql 5.7。</li><li>JDK版本为1.8_211。</li><li>项目使用Spring+SpringMVC+Mybits框架。</li></ol><h2 id="三、项目还原设置"><a href="#三、项目还原设置" class="headerlink" title="三、项目还原设置"></a>三、项目还原设置</h2><ol><li>将bookshop.sql文件还原至数据库中。</li><li>打开BookShop&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;vilicode&#x2F;config&#x2F;jdbc.properties文件进行配置：<ol><li>url更换为自己的数据库连接字符串。</li><li>user更换为自己数据库的用户名。</li><li>password更换为自己的密码。</li></ol></li><li>使用IDEA打开项目并重新指定jdk。</li><li>在IDEA中配置Maven路径并下载所需依赖文件。</li><li>下载Tomcat并在IDEA中配置。</li><li>运行项目。</li></ol><h1 id="四、效果展示"><a href="#四、效果展示" class="headerlink" title="四、效果展示"></a>四、效果展示</h1><ul><li><p>叮当首页</p></li><li><p><a href="https://imgse.com/i/pCeq0Dx"><img src="https://s1.ax1x.com/2023/06/13/pCeq0Dx.png" alt="pCeq0Dx.png"></a></p></li><li><p>热销推荐</p></li><li><p><a href="https://imgse.com/i/pCeqavR"><img src="https://s1.ax1x.com/2023/06/13/pCeqavR.png" alt="pCeqavR.png"></a></p></li><li><p>新品</p></li><li><p><a href="https://imgse.com/i/pCeqBb6"><img src="https://s1.ax1x.com/2023/06/13/pCeqBb6.png" alt="pCeqBb6.png"></a></p></li><li><p>客户管理</p></li><li><p><a href="https://imgse.com/i/pCeqU29"><img src="https://s1.ax1x.com/2023/06/13/pCeqU29.png" alt="pCeqU29.png"></a></p></li><li><p>类目管理</p></li><li><p><a href="https://imgse.com/i/pCeqtC4"><img src="https://s1.ax1x.com/2023/06/13/pCeqtC4.png" alt="pCeqtC4.png"></a></p></li><li><p>全部订单</p></li><li><p><a href="https://imgse.com/i/pCeqN8J"><img src="https://s1.ax1x.com/2023/06/13/pCeqN8J.png" alt="pCeqN8J.png"></a></p></li><li><p>商品管理</p></li><li><p><a href="https://imgse.com/i/pCeqwK1"><img src="https://s1.ax1x.com/2023/06/13/pCeqwK1.png" alt="pCeqwK1.png"></a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教务查询系统</title>
    <link href="/2023/08/01/%E6%95%99%E5%8A%A1%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/08/01/%E6%95%99%E5%8A%A1%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个项目是一个简单的教务查询系统，其中有三种角色：管理员，教师，学生。三种角色都有相应的权限，其中：  </p><ul><li>管理员：对课程、学生信息、教师信息等进行增删改查，修改个人密码，修改学生和教师的密码</li><li>教师：可以查看自己教授的课程，查询选修该课程的学生，对选修该课程的学生进行打分，修改个人密码</li><li>学生：可以进行选课，查看已修课程，查看已选课程，退选课程，修改个人密码</li></ul><h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>Web框架：SpringBoot</p><p>ORM框架：Mybatis</p><p>安全框架：Shiro</p><p>分页插件：PageHelper</p><p>连接池：SpringBoot自带的HiKariCP</p><p>日志：SpringBoot自带的LogBack</p><p>前端框架：Bootstrap</p><h1 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h1><ul><li>登录账户<ul><li>管理员账户：admin</li><li>老师账户：1001</li><li>学生账户：10001</li><li>密码均为：123</li></ul></li></ul><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h3 id="1、运行环境和所需工具"><a href="#1、运行环境和所需工具" class="headerlink" title="1、运行环境和所需工具"></a>1、运行环境和所需工具</h3><ul><li>编译器：IntelliJ IDEA</li><li>项目构建工具：Maven</li><li>数据库：Mysql</li><li>JDK版本：jdk1.8</li><li>Tomcat版本：Tomcat8.x</li></ul><h3 id="2、初始化项目"><a href="#2、初始化项目" class="headerlink" title="2、初始化项目"></a>2、初始化项目</h3><ul><li>在你的Mysql中，创建一个数据库名称为 EducationalManagementSystem 的数据库，并导入我提供的 .sql 文件。</li><li>进入src&#x2F;main&#x2F;resources修改application.properties配置文件,把数据库登录名和密码，改为你本地的。</li><li>使用 IntelliJ IDEA 导入项目，选择Maven项目选项，一路点击next就行。</li><li>在 IntelliJ IDEA 中，运行SpringBoot启动类。</li><li>运行<br><a href="https://imgse.com/i/pCe9zxU"><img src="https://s1.ax1x.com/2023/06/12/pCe9zxU.png" alt="pCe9zxU.png"></a></li></ul><h1 id="功能模块介绍"><a href="#功能模块介绍" class="headerlink" title="功能模块介绍"></a>功能模块介绍</h1><h3 id="1、登录模块功能"><a href="#1、登录模块功能" class="headerlink" title="1、登录模块功能"></a>1、登录模块功能</h3><p>使用Shiro权限管理框架，实现登录验证和登录信息的储存，根据不同的登录账户，分发权限角色，对不同页面url进行角色设置</p><h3 id="2、管理员模块功能"><a href="#2、管理员模块功能" class="headerlink" title="2、管理员模块功能"></a>2、管理员模块功能</h3><p>管理员可对课程、学生信息、教师信息等进行增删改查，修改个人密码，修改学生和教师的密码</p><ul><li><p>课程管理：当课程已经有学生选课成功时，将不能删除</p></li><li><p>学生管理：添加学生信息时，其信息也会添加到登录表中</p></li><li><p>教师管理：添加教师信息时，其信息也会添加到登录表中</p></li><li><p>账户密码重置：修改学生和教师的密码，不需要输入旧密码</p></li><li><p>修改密码：修改自己的密码，需要输入旧密码</p></li><li><p><strong>所有学生信息：</strong><br><a href="https://imgse.com/i/pCeCiZ9"><img src="https://s1.ax1x.com/2023/06/12/pCeCiZ9.md.png" alt="pCeCiZ9.md.png"></a></p></li><li><p><strong>按照名字模糊查找学生信息：</strong><br><a href="https://imgse.com/i/pCeCVG6"><img src="https://s1.ax1x.com/2023/06/12/pCeCVG6.md.png" alt="pCeCVG6.md.png"></a></p></li><li><p><strong>添加学生信息：</strong><br><a href="https://imgse.com/i/pCeCnMD"><img src="https://s1.ax1x.com/2023/06/12/pCeCnMD.md.png" alt="pCeCnMD.md.png"></a></p></li><li><p><strong>修改学生信息：</strong><br><a href="https://imgse.com/i/pCeCQZd"><img src="https://s1.ax1x.com/2023/06/12/pCeCQZd.md.png" alt="pCeCQZd.md.png"></a></p></li><li><p><strong>删除学生信息：</strong><br><a href="https://imgse.com/i/pCeC1II"><img src="https://s1.ax1x.com/2023/06/12/pCeC1II.md.png" alt="pCeC1II.md.png"></a></p></li><li><p><strong>修改学生或教师的密码：</strong><br><a href="https://imgse.com/i/pCeC8it"><img src="https://s1.ax1x.com/2023/06/12/pCeC8it.md.png" alt="pCeC8it.md.png"></a></p></li><li><p><strong>修改自己的密码：</strong><br><a href="https://imgse.com/i/pCeCYz8"><img src="https://s1.ax1x.com/2023/06/12/pCeCYz8.md.png" alt="pCeCYz8.md.png"></a></p></li></ul><h3 id="3、教师模块功能"><a href="#3、教师模块功能" class="headerlink" title="3、教师模块功能"></a>3、教师模块功能</h3><p>教师登陆后，可以查看自己教授的课程，查询选修该课程的学生，对选修该课程的学生进行打分，修改个人密码</p><ul><li><strong>查看自己所教授的课程：</strong><br><a href="https://imgse.com/i/pCeCUsg"><img src="https://s1.ax1x.com/2023/06/12/pCeCUsg.md.png" alt="pCeCUsg.md.png"></a></li><li><strong>查询选修该课程的学生：</strong><br><a href="https://imgse.com/i/pCeC0ds"><img src="https://s1.ax1x.com/2023/06/12/pCeC0ds.png" alt="pCeC0ds.png"></a></li><li><strong>对选修该课程的学生进行打分：</strong><br><a href="https://imgse.com/i/pCeC6zT"><img src="https://s1.ax1x.com/2023/06/12/pCeC6zT.png" alt="pCeC6zT.png"></a></li><li><strong>修改自己的密码：</strong><br><a href="https://imgse.com/i/pCeCRL4"><img src="https://s1.ax1x.com/2023/06/12/pCeCRL4.png" alt="pCeCRL4.png"></a></li></ul><h3 id="4、学生模块功能"><a href="#4、学生模块功能" class="headerlink" title="4、学生模块功能"></a>4、学生模块功能</h3><p>学生登录后，可以进行选课，查看已修课程，查看已选课程，退选课程，修改个人密码</p><ul><li><strong>所有课程: 在这里选修课程，选好后，将会自动跳转到已选课程选项：</strong><br><a href="https://imgse.com/i/pCeChw9"><img src="https://s1.ax1x.com/2023/06/12/pCeChw9.png" alt="pCeChw9.png"></a></li><li><strong>已选课程: 这里显示的是，还没修完的课程，也就是老师还没给成绩，由于还没有给成绩，所以这里可以进行退课操作：</strong><br><a href="https://imgse.com/i/pCeCXeH"><img src="https://s1.ax1x.com/2023/06/12/pCeCXeH.png" alt="pCeCXeH.png"></a></li><li><strong>已修课程: 显示已经修完，老师已经给成绩的课程：</strong><br><a href="https://imgse.com/i/pCePpfP"><img src="https://s1.ax1x.com/2023/06/12/pCePpfP.png" alt="pCePpfP.png"></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot+jsp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图书管理系统</title>
    <link href="/2023/08/01/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/08/01/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个项目是一个简单的图书管理系统，其中由三种角色：系统管理员、管理员、用户。三种角色都有对应权限，其中：</p><ul><li>系统管理员：对用户、书籍和类别的增删改查。</li><li>管理员：对借书和还书申请处理。</li><li>用户：对书籍的查看和借阅以及归还操作。</li></ul><h1 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h1><p>后端：springboot、mysql、mybatis-plus。</p><p>前端：javascript、css3、html5、bootstrap。</p><h1 id="账户登录"><a href="#账户登录" class="headerlink" title="账户登录"></a>账户登录</h1><p>登录账户</p><ul><li>系统管理员账户：admin 。密码：123</li><li>管理员账户：tom.密码：123</li><li>用户账户：lisi.密码：123123</li></ul><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="1、运行环境和所需工具"><a href="#1、运行环境和所需工具" class="headerlink" title="1、运行环境和所需工具"></a>1、运行环境和所需工具</h2><ul><li>编译器：IntelliJ IDEA</li><li>项目构建工具：Maven</li><li>数据库：Mysql</li><li>JDK版本：jdk1.8、</li></ul><h2 id="2、初始化项目"><a href="#2、初始化项目" class="headerlink" title="2、初始化项目"></a>2、初始化项目</h2><ul><li>在你的Mysql中，创建一个数据库名称为 library的数据库，并导入我提供的 .sql 文件。</li><li>进入src&#x2F;main&#x2F;resources修改application.yml配置文件,把数据库登录名和密码，改为你本地的。</li><li>使用 IntelliJ IDEA 导入项目，选择Maven项目选项，一路点击next就行。</li><li>在 IntelliJ IDEA 中，运行SpringBoot启动类。</li><li>运行</li></ul><p><a href="https://imgse.com/i/pCeZ32n"><img src="https://s1.ax1x.com/2023/06/12/pCeZ32n.png" alt="pCeZ32n.png"></a></p><ul><li>系统管理员界面</li></ul><p><a href="https://imgse.com/i/pCeZlCj"><img src="https://s1.ax1x.com/2023/06/12/pCeZlCj.png" alt="pCeZlCj.png"></a></p><ul><li>管理员界面</li></ul><p><a href="https://imgse.com/i/pCeZ18s"><img src="https://s1.ax1x.com/2023/06/12/pCeZ18s.png" alt="pCeZ18s.png"></a></p><ul><li>用户界面</li></ul><p><a href="https://imgse.com/i/pCeZM5Q"><img src="https://s1.ax1x.com/2023/06/12/pCeZM5Q.png" alt="pCeZM5Q.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot+bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高校宿舍管理系统</title>
    <link href="/2023/08/01/%E9%AB%98%E6%A0%A1%E5%AE%BF%E8%88%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/08/01/%E9%AB%98%E6%A0%A1%E5%AE%BF%E8%88%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="高校宿舍管理系统"><a href="#高校宿舍管理系统" class="headerlink" title="高校宿舍管理系统"></a>高校宿舍管理系统</h1><ol><li><h6 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h6><p>idea：所有版本都可以</p><p>mysql：5或者8</p><p>nodejs环境：版本为16+</p><p>maven：3.6.+</p></li><li><p>系统介绍</p><p>在宿舍管理系统的设计发开过程中主要用了springboot+vue技术，其中用到的工具有：JDK、IDEA、MySQL、Tomcat等。本系统是结合当下大多学校的基本宿舍管理设计的一个系统，系统共设计为3个大体模块：系统管理员模块、宿舍管理员、学生模块。实现整体宿舍信息的管理功能。</p></li><li><p>成果展示</p><p> 系统登录界面</p><p><a href="https://imgse.com/i/pCVrFIg"><img src="https://s1.ax1x.com/2023/06/11/pCVrFIg.png" alt="pCVrFIg.png"></a></p><p>系统管理员登录成功界面（宿舍管理员同样，只是少了宿管管理菜单）</p><p><a href="https://imgse.com/i/pCVrJzR"><img src="https://s1.ax1x.com/2023/06/11/pCVrJzR.png" alt="pCVrJzR.png"></a></p><p>学生登录界面</p><p><a href="https://imgse.com/i/pCVr6SA"><img src="https://s1.ax1x.com/2023/06/11/pCVr6SA.png" alt="pCVr6SA.png"></a></p></li><li><p>项目运行</p><p>运行后端：直接将解压后的目录导入idea如何配置好jdk版本和本地maven仓库即可。</p><p>运行前端：终端打开运行npm i,然后再npm run serve即可。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot+vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2023/07/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/07/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/28/hello-world/"/>
    <url>/2022/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
